/**
 * URL Validation Service
 * 
 * Provides functionality to validate URL parameters and ensure they 
 * conform to predefined valid values.
 */
(function() {
    'use strict';
    
    // Storage for validation rules and corrections
    const validationRegistry = {};
    const paramCorrections = {};
    
    // Store original replaceState method
    const originalReplaceState = window.history.replaceState;
    
    /**
     * Register validation rules for a URL parameter
     * 
     * @param {string} paramName - The name of the parameter to validate
     * @param {Array} validValues - Array of valid values for this parameter
     * @param {string} defaultValue - Default value to use if an invalid value is encountered
     */
    function registerParameterValidation(paramName, validValues, defaultValue) {
        validationRegistry[paramName] = {
            validValues: validValues,
            defaultValue: defaultValue
        };
    }
    
    /**
     * Register a correction for an invalid parameter value
     * 
     * @param {string} paramName - The name of the parameter
     * @param {string} correctValue - The correct value to use
     */
    function registerParameterCorrection(paramName, correctValue) {
        paramCorrections[paramName] = correctValue;
        
        // Apply correction immediately
        applyValidatedURLParameters();
    }
    
    /**
     * Updates URL with validated parameters and applies the changes to the browser history
     * 
     * @param {Object} newParams - New parameters to add to the URL
     * @returns {string} The validated URL
     */
    function applyValidatedURLParameters(newParams = {}) {
        const currentUrl = new URL(window.location.href);
        let updated = false;
        
        // Apply registered validations and corrections
        for (const [paramName, validation] of Object.entries(validationRegistry)) {
            const currentValue = newParams[paramName] !== undefined ? 
                newParams[paramName] : 
                currentUrl.searchParams.get(paramName);
                
            if (currentValue !== null) {
                // Check if value is valid
                if (!validation.validValues.includes(currentValue)) {
                    // If invalid, use the correct value
                    const correctValue = paramCorrections[paramName] || validation.defaultValue;
                    currentUrl.searchParams.set(paramName, correctValue);
                    updated = true;
                }
            }
        }
        
        // Apply any new parameters passed to the function
        for (const [param, value] of Object.entries(newParams)) {
            if (currentUrl.searchParams.get(param) !== value) {
                currentUrl.searchParams.set(param, value);
                updated = true;
            }
        }
        
        // Update URL if needed
        if (updated) {
            originalReplaceState.call(window.history, null, document.title, currentUrl.toString());
        }
        
        return currentUrl.toString();
    }
    
    /**
     * Validates and corrects parameters in a URL
     * 
     * @param {string} url - The URL to validate
     * @returns {string} The validated URL
     */
    function validateURLParameters(url) {
        try {
            let urlObj;
            
            // Handle relative URLs
            if (url.startsWith('http')) {
                urlObj = new URL(url);
            } else {
                const base = window.location.href.split('?')[0];
                urlObj = new URL(url.startsWith('?') ? base + url : base + '?' + url);
            }
            
            // Check if any parameters need correction
            let needsCorrection = false;
            
            for (const [paramName, validation] of Object.entries(validationRegistry)) {
                const currentValue = urlObj.searchParams.get(paramName);
                
                if (currentValue !== null && !validation.validValues.includes(currentValue)) {
                    const correctValue = paramCorrections[paramName] || validation.defaultValue;
                    urlObj.searchParams.set(paramName, correctValue);
                    needsCorrection = true;
                }
            }
            
            if (needsCorrection) {
                // Format the URL appropriately
                let correctedUrl = urlObj.toString();
                if (url.startsWith('?')) {
                    correctedUrl = '?' + correctedUrl.split('?')[1];
                } else if (!url.startsWith('http')) {
                    correctedUrl = url.includes('?') ? url.split('?')[0] + '?' + correctedUrl.split('?')[1] : correctedUrl;
                }
                
                return correctedUrl;
            }
        } catch (e) {
            // Error handling without logging
        }
        
        return url;
    }
    
    // Override history.replaceState to validate URLs
    window.history.replaceState = function(state, title, url) {
        if (url && typeof url === 'string') {
            // Only validate URLs that contain parameters
            if (url.includes('?')) {
                url = validateURLParameters(url);
            }
        }
        
        // Call the original function
        originalReplaceState.call(this, state, title, url);
    };
    
    // Export public API
    window.URLValidationService = {
        registerParameterValidation,
        registerParameterCorrection,
        applyValidatedURLParameters,
        validateURLParameters
    };
})(); 