function beforeSubmit() {
	const button = document.getElementById("buttonSaveWorkspaceSettingsModal");
	button.innerHTML = trans('Please Wait...');
	button.disabled = true;
}

function debounce(func, wait, immediate) {
	let timeout;
	return function() {
		let context = this, args = arguments;
		const later = function() {
			timeout = null;
			if (!immediate) func.apply(context, args);
		};
		const callNow = immediate && !timeout;
		clearTimeout(timeout);
		timeout = setTimeout(later, wait);
		if (callNow) func.apply(context, args);
	};
}

function checkUsernameUnique(currentUsername) {
	const usernameInput = $('#workspace-username');
	const newUsername = usernameInput.val().trim().toLowerCase().replace(/[^a-zA-Z0-9\-_]/g, '').substring(0, 48);
	usernameInput.val(newUsername);

	const submitButton = $('button[type="submit"]');
	usernameInput.removeClass('border-red');
	submitButton.prop('disabled', false);

	return debounce(function () {
		$.ajax({
			url: '/@' + currentUsername + '/isUnique/' + newUsername,
			type: 'GET',
			success: function (isUnique) {
				if (!isUnique) {
					usernameInput.addClass('border-red');
					submitButton.prop('disabled', true);
					toastr.error(trans("This username is already in use"));
				}
			},
			error: function (xhr) {
				console.error("Error checking username uniqueness", xhr);
			}
		});
	}, 500);
}

$(document).ready(function() {
	$('#workspace-username').on('input', function() {
		const currentUsername = this.dataset.username;
		checkUsernameUnique(currentUsername);
	});

	$('#workspace-subscription-toggle').change(function() {
		if ($(this).is(':checked')) {
			$('#subscription-value-input').prop('disabled', false);
		} else {
			$('#subscription-value-input').prop('disabled', true);
			$('#subscription-value-input').removeClass('border-red');
		}
	}).trigger('change');

	$('#buttonSaveWorkspaceSettingsModal').off('click').on('click', function(e) {
		e.preventDefault();

		let isValid = true;
		let sizeErrorShown = false;
		const notEmptyInputs = [$('#workspace-name-input'), $('#workspace-username')];

		notEmptyInputs.forEach(input => {
			if (input.val().trim() === '') {
				input.addClass('border-red');
				isValid = false;
			} else {
				input.removeClass('border-red');
				if (input.is('#workspace-name-input') && input.val().length > 64) {
					if (!sizeErrorShown) {
						toastr.error(trans('The workspace name cannot exceed 64 characters.'));
						sizeErrorShown = true;
					}
					input.addClass('border-red');
					isValid = false;
				}
			}
		});

		const subscriptionToggleChecked = $('#workspace-subscription-toggle').is(':checked');
		const subsPriceInput = $('#subscription-value-input');

		if (subscriptionToggleChecked && subsPriceInput.val() <= 0) {
			subsPriceInput.addClass('border-red');
			isValid = false;
		} else {
			subsPriceInput.removeClass('border-red');
		}

		if (isValid) {
			$('#workspace-settings-form').submit();
		} else {
			$('.border-red:first').focus();
			if (!sizeErrorShown) {
				toastr.error(trans("Some required fields are not filled in"));
			}
		}
	});

	if ($('#workspace-image-cover').data('coverUrl')) {
		(async function () {
			const coverImageRes = await fetch($('#workspace-image-cover').data('coverUrl'));
			const coverImageBlob = await coverImageRes.blob();
			const coverImageFile = new File([coverImageBlob], $('#workspace-image-cover').data('coverFilename'), {
				type: coverImageBlob.type || 'image/png',
			});

			const coverInput = document.getElementById("workspace-image-cover");
			const dt = new DataTransfer();
			dt.items.add(coverImageFile);
			coverInput.files = dt.files;
		})();
	}
});